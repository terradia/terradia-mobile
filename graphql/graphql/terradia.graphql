# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Card {
    brand: String!
    exp_month: Int!
    exp_year: Int!
    id: String!
    last4: String!
}

type Cart {
    company: Company!
    createdAt: Date
    customer: Customer!
    expirationDate: Date
    id: ID!
    numberProducts: Int!
    products: [CartProduct]
    totalPrice: Float
    updatedAt: Date
}

type CartProduct {
    cart: Cart!
    id: ID!
    product: Product
    quantity: Int!
}

type Category {
    id: String!
    name: String!
    parentCategoryId: String
    products: [Product]
}

type Company {
    address: String!
    archivedAt: Date
    averageMark: Float
    companyImages: [CompanyImage]
    cover: CompanyImage
    createdAt: Date
    customerCarts: [Cart]
    deliveryDays: [CompanyDeliveryDay]
    description: String
    distance: Float
    email: String!
    geoPosition: GeographicPoint
    id: ID!
    logo: CompanyImage
    name: String!
    numberOfMarks: Int
    numberOrderHistories: Int
    numberOrders: Int
    numberProducts: Int
    officialName: String
    openingDays: [CompanyOpeningDay]
    phone: String!
    products: [Product]
    productsCategories: [CompanyProductsCategory]
    reviews: [CompanyReview]
    siren: String!
    tags: [CompanyTag]
    updatedAt: Date
    users: [CompanyUser]
}

type CompanyAddress {
    codeCedexEtablissement: String
    codeCommuneEtablissement: String
    codePaysEtrangerEtablissement: String
    codePostalEtablissement: String
    complementAdresseEtablissement: String
    distributionSpecialeEtablissement: String
    indiceRepetitionEtablissement: String
    libelleCedexEtablissement: String
    libelleCommuneEtablissement: String
    libelleCommuneEtrangerEtablissement: String
    libellePaysEtrangerEtablissement: String
    libelleVoieEtablissement: String
    numeroVoieEtablissement: String
    typeVoieEtablissement: String
}

type CompanyDates {
    activitePrincipaleEtablissement: String
    caractereEmployeurEtablissement: String
    changementActivitePrincipaleEtablissement: Boolean
    changementCaractereEmployeurEtablissement: Boolean
    changementDenominationUsuelleEtablissement: Boolean
    changementEnseigneEtablissement: Boolean
    changementEtatAdministratifEtablissement: Boolean
    dateDebut: String
    dateFin: String
    denominationUsuelleEtablissement: String
    enseigne1Etablissement: String
    enseigne2Etablissement: String
    enseigne3Etablissement: String
    etatAdministratifEtablissement: String
    nomenclatureActivitePrincipaleEtablissement: String
}

type CompanyDeliveryDay {
    company: Company!
    daySlugName: String!
    dayTranslationKey: String!
    hours: [CompanyDeliveryDayHours!]!
    id: ID!
}

type CompanyDeliveryDayHours {
    day: CompanyDeliveryDay!
    endTime: Date!
    id: ID!
    startTime: Date!
}

type CompanyGeo {
    administrativeLevels: CompanyGeoAdministrativeLevels
    building: String
    city: String
    country: String
    countryCode: String
    county: String
    district: String
    extra: CompanyGeoExtra
    formattedAddress: String
    latitude: Float
    longitude: Float
    provider: String
    state: String
    stateCode: String
    streetName: String
    streetNumber: String
    zipcode: String
}

type CompanyGeoAdministrativeLevels {
    level1long: String
    level1short: String
    level2long: String
    level2short: String
}

type CompanyGeoExtra {
    confidence: Int
    googlePlaceId: String
}

type CompanyImage {
    createdAt: Date
    filename: String
    id: ID!
    name: String
    products: [Product]
    updatedAt: Date
}

type CompanyInfo {
    activitePrincipaleRegistreMetiersEtablissement: String
    adresse2Etablissement: CompanyAddress
    adresseEtablissement: CompanyAddress
    anneeEffectifsEtablissement: String
    dateCreationEtablissement: String
    dateDernierTraitementEtablissement: String
    etablissementSiege: Boolean
    nic: String
    nombrePeriodesEtablissement: Int
    periodesEtablissement: CompanyDates
    score: Int
    siren: String
    siret: String
    statutDiffusionEtablissement: String
    trancheEffectifsEtablissement: String
    uniteLegale: LegalUnits
}

type CompanyOpeningDay {
    company: Company!
    daySlugName: String!
    dayTranslationKey: String!
    hours: [CompanyOpeningDayHours!]!
    id: ID!
}

type CompanyOpeningDayHours {
    day: CompanyOpeningDay!
    endTime: Date!
    id: ID!
    startTime: Date!
}

type CompanyProductAdvise {
    company: Company
    content: String
    createdAt: Date
    id: ID!
    product: Product
    title: String
    updatedAt: Date
}

type CompanyProductImage {
    companyImage: CompanyImage!
}

type CompanyProductsCategory {
    company: Company
    id: ID!
    name: String!
    products: [Product]
}

type CompanyReview {
    company: Company
    createdAt: Date
    customer: Customer
    customerMark: Int!
    description: String
    id: String!
    reply: String
    title: String!
    updatedAt: Date
}

type CompanyTag {
    color: String!
    id: String!
    slugName: String!
    translationKey: String!
}

type CompanyUser {
    company: Company
    id: String!
    roles: [Role]
    user: User
}

type CompanyUserInvitation {
    company: Company
    createdAt: Date
    fromUser: User
    id: String!
    invitationEmail: String!
    status: CompanyUserInvitationStatus!
}

type Customer {
    cart: Cart
    companyReviews: [CompanyReview]
    favoriteCompanies: [Company]
    id: String!
    orders: [Order]
    ordersHistory: [OrderHistory]
    user: User
}

type CustomerAddress {
    address: String!
    apartment: String
    customer: Customer
    id: String!
    information: String
    location: GeographicPoint
}

type GeographicPoint {
    coordinates: [Float]
}

type LegalUnits {
    activitePrincipaleUniteLegale: String
    anneeCategorieEntreprise: String
    anneeEffectifsUniteLegale: String
    caractereEmployeurUniteLegale: String
    categorieEntreprise: String
    categorieJuridiqueUniteLegale: String
    dateCreationUniteLegale: String
    dateDernierTraitementUniteLegale: String
    denominationUniteLegale: String
    denominationUsuelle1UniteLegale: String
    denominationUsuelle2UniteLegale: String
    denominationUsuelle3UniteLegale: String
    economieSocialeSolidaireUniteLegale: String
    etatAdministratifUniteLegale: String
    identifiantAssociationUniteLegale: String
    nicSiegeUniteLegale: String
    nomUniteLegale: String
    nomUsageUniteLegale: String
    nombrePeriodesUniteLegale: Int
    nomenclatureActivitePrincipaleUniteLegale: String
    prenom1UniteLegale: String
    prenom2UniteLegale: String
    prenom3UniteLegale: String
    prenom4UniteLegale: String
    prenomUsuelUniteLegale: String
    pseudonymeUniteLegale: String
    sexeUniteLegale: String
    sigleUniteLegale: String
    statutDiffusionUniteLegale: String
    trancheEffectifsUniteLegale: String
    unitePurgeeUniteLegale: Boolean
}

type Mutation {
    _: Boolean
    acceptInvitation(invitationId: String!): CompanyUserInvitation
    acceptOrder(id: ID!): Order
    addCategoryToProduct(categoryName: String!, productId: String!): Product!
    addCompanyImage(companyId: ID!, image: Upload!, name: String): CompanyImage
    addCompanyImages(companyId: ID!, images: [Upload]!, names: [String]): [CompanyImage]
    addDeliveryDay(companyId: String!, day: String!, hours: [ScheduleInput]): CompanyDeliveryDay!
    addFavoriteCompany(companyId: String!): Customer
    addImageToProduct(companyImageId: String!, isCover: Boolean, productId: String!): CompanyImage
    addOpeningDay(companyId: String!, day: String!, hours: [ScheduleInput]): CompanyOpeningDay!
    addProductToCart(productId: ID!, quantity: Int!): CartProduct
    addProductToCompanyCategory(categoryId: String!, productId: String!): Product
    addReplyToCompanyReview(reply: String!, reviewId: String!): CompanyReview
    addReplyToProductReview(reply: String, reviewId: String!): ProductReview
    addTagToCompany(companyId: String!, companyTagId: String!): Company!
    addUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
    cancelInvitation(id: String!): Boolean
    cancelOrder(id: ID!): OrderHistory
    createACharge: Boolean
    createCategory(name: String!, parentCategoryId: String): Category!
    createCompany(address: String!, description: String, email: String!, name: String!, phone: String!, siren: String!): Company!
    createCompanyProductAdvise(companyId: ID!, content: String!, productId: ID!, title: String!): CompanyProductAdvise
    createCompanyProductsCategory(companyId: String!, name: String!): CompanyProductsCategory
    createCompanyReview(companyId: String!, customerMark: Int!, description: String, title: String): CompanyReview
    createCompanyTag(color: String!, name: String!): CompanyTag!
    createOrUpdateCustomerAddress(address: String!, apartment: String, id: String, information: String): CustomerAddress
    createOrderHistoryReview(comment: String, customerMark: Int!, orderHistoryId: ID!): OrderHistoryReview
    createProduct(companyId: String!, companyProductsCategoryId: String, coverId: String, description: String!, name: String!, price: Float!, quantityForUnit: Int, unitId: String): Product!
    createProductReview(customerMark: Int!, description: String, productId: String!, title: String): ProductReview
    createStripeCustomer: Boolean!
    declineInvitation(invitationId: String!): CompanyUserInvitation
    declineOrder(id: ID!, reason: String): OrderHistory
    defineUserAsCustomer(userId: String!): Customer
    deleteCard(cardId: String!): Boolean
    deleteCategory(id: String!): Category!
    deleteCompany(companyId: String!): Company!
    deleteCompanyProductAdvise(id: ID!): CompanyProductAdvise
    deleteCompanyReply(reviewId: String): CompanyReview
    deleteCompanyTag(companyTagId: String!): CompanyTag!
    deleteImageFromProduct(companyImageId: String!, productId: String!): CompanyImage
    deleteProduct(productId: String!): Int
    deleteProductReply(reviewId: String!): ProductReview
    deleteTagFromCompany(companyId: String!, companyTagId: String!): Company!
    deleteUser(password: String): User!
    generateCodePasswordForgot(email: String!): Boolean
    inviteNewMember(companyId: String!, invitationEmail: String!): CompanyUserInvitation
    joinCompany(companyId: String!, userId: String!): Company!
    leaveCompany(companyId: String!, userId: String!): Company!
    login(email: String!, exponentPushToken: String, password: String!): SigninAnswer!
    passwordValidation(password: String!): Boolean
    receiveOrder(id: ID!): OrderHistory
    register(defineUserAsCustomer: Boolean, email: String!, exponentPushToken: String, firstName: String!, lastName: String!, password: String!, phone: String): SignupAnswer!
    removeCompanyImage(imageId: ID!): CompanyImage
    removeCompanyImages(imagesId: [ID]!): [CompanyImage]
    removeCompanyProductsCategory(categoryId: String!): CompanyProductsCategory
    removeDeliveryDay(DeliveryDayId: String!): CompanyDeliveryDay!
    removeDeliveryHours(hourId: String!): CompanyDeliveryDayHours!
    removeFavoriteCompany(companyId: String!): Customer
    removeOpeningDay(openingDayId: String!): CompanyOpeningDay!
    removeOpeningHours(hourId: String!): CompanyOpeningDayHours!
    removeProductFromCart(productId: ID!, quantity: Int!): Int
    removeProductFromCompanyCategory(productId: String!): Product
    removeUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
    restoreCompany(companyId: String!): Company!
    saveCard(cardId: String!): Card!
    setActiveCustomerAddress(id: String!): CustomerAddress
    signInWithFacebook(exponentPushToken: String, facebookToken: String!): SigninAnswer!
    signInWithgeneratedCode(code: String!, email: String!, exponentPushToken: String): SigninAnswer!
    signUpWithFacebook(defineUserAsCostumer: Boolean, exponentPushToken: String, facebookToken: String!): SignupAnswer!
    updateCompany(companyId: ID!, newValues: CompanyUpdateInput): Company!
    updateCompanyImageName(imageId: ID!, name: String!): CompanyImage
    updateCompanyProductAdvise(content: String, id: ID!, title: String): CompanyProductAdvise
    updateCompanyProductsCategory(categoryId: String!, name: String): CompanyProductsCategory
    updateCustomerDefaultSource(cardId: String!): Boolean
    updateDeliveryDay(DeliveryDayId: String!, hours: [ScheduleInput]): CompanyDeliveryDay!
    updateDeliveryHours(hourId: String!, hours: ScheduleInput!): CompanyDeliveryDayHours!
    updateOpeningDay(hours: [ScheduleInput], openingDayId: String!): CompanyOpeningDay!
    updateOpeningHours(hourId: String!, hours: ScheduleInput!): CompanyOpeningDayHours!
    updateProduct(coverId: String, description: String, name: String, price: Float, productId: String, quantityForUnit: Float, unitId: String): Product
    updateProductCover(companyImageId: String!, productId: String!): Product
    updateProductsPosition(productsPositions: [ProductPosition!]): Boolean
    updateUser(email: String, firstName: String, lastName: String, password: String, phone: String): User!
    updateUserAvatar(avatar: Upload!): User
    uploadImageOfProduct(image: Upload!, isCover: Boolean, productId: String!): CompanyImage
    validateCart: Order
}

type Order {
    code: String!
    company: Company!
    createdAt: Date!
    customer: Customer!
    decliningReason: String
    id: String!
    numberProducts: Int!
    price: Float!
    products: [OrderProduct]
    status: OrderStatus!
    stripePaymentIntent: String
    updatedAt: Date!
}

type OrderHistory {
    code: String!
    companyAddress: String
    companyCover: String
    companyId: String
    companyLogo: String
    companyName: String
    createdAt: Date!
    customerId: String
    customerReview: OrderHistoryReview
    decliningReason: String
    id: ID!
    numberProducts: Int!
    orderCreationDate: Date!
    price: Float!
    products: [OrderProductHistory]
    status: OrderHistoryStatus
    stripePaymentIntent: String
    updatedAt: Date!
}

type OrderHistoryReview {
    comment: String
    createdAt: Date
    customerMark: Int!
    id: String!
    orderHistory: OrderHistory
}

type OrderProduct {
    id: String!
    order: Order!
    price: Float!
    product: Product!
    quantity: Int!
}

type OrderProductHistory {
    id: ID!
    name: String
    orderHistory: OrderHistory
    price: Float!
    productId: String
    quantity: Int
    quantityForUnit: Int
    unit: Unit!
}

type PaymentIntent {
    id: String!
    payment_method: Card
}

type Product {
    advises: [CompanyProductAdvise]
    averageMark: Float
    categories: [Category]
    company: Company
    companyProductsCategory: CompanyProductsCategory
    cover: CompanyProductImage
    createdAt: Date
    customerBasketProducts: [CartProduct]
    description: String!
    id: ID!
    images: [CompanyImage]
    name: String!
    numberAdvises: Int
    numberOfMarks: Int
    position: Int
    price: Float!
    quantityForUnit: Float!
    reviews: [ProductReview]
    unit: Unit
    updatedAt: Date
}

type ProductReview {
    createdAt: Date
    customer: Customer
    customerMark: Int!
    description: String
    id: String!
    product: Product
    reply: String
    title: String!
    updatedAt: Date
}

type Query {
    _: Boolean
    checkSiren(siren: String!): CompanyInfo
    doesFacebookAccountExistWithEmail(facebookToken: String!): Boolean!
    geocode(address: String!): [CompanyGeo]
    getActiveCustomerAddress: CustomerAddress
    getAllCategories: [Category]!
    getAllCompanies(page: Int, pageSize: Int): [Company]
    getAllCompanyProductsCategories(companyId: String!): [CompanyProductsCategory]
    getAllCompanyTags: [CompanyTag]!
    getAllCustomerAddressesByUser: [CustomerAddress]
    getAllCustomers: [Customer]
    getAllProducts: [Product]!
    getAllRoles: [Role]!
    getAllUnits(referencesOnly: Boolean): [Unit]!
    getAllUsers: [User]!
    getCart: Cart
    getCartsByCompany(companyId: String): [Cart]
    getCategoryByName(name: String!): Category
    getCompanies: [Company]
    getCompaniesByDistance(lat: Float!, lon: Float!, page: Int, pageSize: Int): [Company]
    getCompaniesByDistanceByCustomer(page: Int, pageSize: Int): [Company]
    getCompaniesByUser(userId: ID!): [CompanyUser]
    getCompaniesInvitations(companyId: String): [CompanyUserInvitation]
    getCompany(companyId: ID!): Company
    getCompanyByName(name: String!): Company
    getCompanyImages(companyId: ID, page: Int, pageSize: Int): [CompanyImage]
    getCompanyOrderHistories(companyId: ID!, fromDate: Date, limit: Int = 10, offset: Int = 0, status: String, toDate: Date): [OrderHistory]
    getCompanyProductAdvises(companyId: ID, limit: Int, offset: Int, productId: ID): [CompanyProductAdvise]
    getCompanyProductsCategories(companyId: String!): [CompanyProductsCategory]
    getCompanyProductsCategory(categoryId: String, companyId: String!, name: String): CompanyProductsCategory
    getCompanyReviews(id: ID!, limit: Int!, offset: Int!): [CompanyReview]
    getCompanyTag(companyTagId: String, slugName: String): CompanyTag
    getCurrentOrders(companyId: ID!, limit: Int = 10, offset: Int = 0, status: String): [Order]
    getCustomer(userId: String!): Customer
    getCustomerFavoriteCompanies(userId: String): [Company]
    getMyCompaniesInvitations(status: CompanyUserInvitationStatusRequest): [CompanyUserInvitation!]
    getMyOrderHistories(status: String): [OrderHistory]
    getMyOrders(status: String): [Order]
    getOrder(id: ID!): Order
    getOrderHistory(id: ID!): OrderHistory
    getPaymentIntents(paymentId: String!): PaymentIntent
    getPaymentIntentsCard(paymentId: String!): Card
    getProduct(id: ID!): Product!
    getProductAdvise(id: ID!): CompanyProductAdvise
    getProductReviews(id: ID!, limit: Int!, offset: Int!): [ProductReview]
    getProductsByCompany(companyId: String): [Product]!
    getProductsByCompanyByCategory(companyId: String): [Category]!
    getStripeCustomer: StripeCustomer
    getStripeCustomerDefaultSource: Card
    getUnit(id: ID, name: String, notation: String): Unit!
    getUser: User
    isUserInvited(email: String!): Boolean
    listCustomerCards: [Card]
    searchCompanies(query: String!): [Company]
    totalCartPrice: Float
}

type Role {
    id: String!
    slugName: String
    translationKey: String
    userPermission: UserPermissions
}

type SigninAnswer {
    token: String!
    userId: String!
}

type SignupAnswer {
    message: String!
    token: String!
    userId: String!
}

type StripeCustomer {
    default_source: String!
    id: String!
}

type Subscription {
    _: Boolean
}

type Unit {
    id: ID!
    multiplicationFactor: Float
    name: String!
    notation: String!
    referenceUnit: Unit
}

type User {
    archivedAt: Date
    avatar: String
    companies: [CompanyUser]
    createdAt: Date
    customer: Customer
    email: String!
    expoPushToken: String
    firstName: String!
    id: ID!
    lastName: String!
    password: String!
    phone: String!
    validated: Boolean
}

type UserPermissions {
    createCompany: Boolean
    id: String!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum CompanyUserInvitationStatus {
    ACCEPTED
    CANCELED
    DECLINED
    PENDING
}

enum CompanyUserInvitationStatusRequest {
    ACCEPTED
    ALL
    CANCELED
    DECLINED
    PENDING
}

enum OrderHistoryStatus {
    CANCELED
    DECLINED
    FINISHED
}

enum OrderStatus {
    ACCEPTED
    AVAILABLE
    CANCELED
    DECLINED
    PENDING
}

input CompanyUpdateInput {
    address: String
    coverId: String
    description: String
    email: String
    firstname: String
    lastname: String
    logoId: String
    month: String
    name: String
    officialName: String
    phone: String
    siren: String
    year: String
}

input ProductPosition {
    categoryId: ID
    position: Int!
    productId: ID!
    type: String
}

input ScheduleInput {
    endTime: Date!
    startTime: Date!
}


scalar Date

"The `Upload` scalar type represents a file upload."
scalar Upload