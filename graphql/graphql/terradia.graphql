# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Card {
    brand: String!
    exp_month: Int!
    exp_year: Int!
    id: String!
    last4: String!
}

type Cart {
    company: Company!
    createdAt: Date
    customer: Customer!
    expirationDate: Date
    id: ID!
    products: [CartProduct]
    totalPrice: Float
    updatedAt: Date
}

type CartProduct {
    cart: Cart!
    id: ID!
    product: Product
    quantity: Int!
}

type Category {
    id: String!
    name: String!
    parentCategoryId: String
    products: [Product]
}

type Company {
    address: String!
    archivedAt: Date
    averageMark: Float
    companyImages: [CompanyImage]
    cover: CompanyImage
    createdAt: Date
    customerCarts: [Cart]
    description: String
    distance: Float
    email: String!
    geoPosition: GeographicPoint
    id: ID!
    logo: CompanyImage
    name: String!
    numberOfMarks: Int
    openingDays: [CompanyOpeningDay]
    phone: String!
    products: [Product]
    productsCategories: [CompanyProductsCategory]
    reviews: [CompanyReview]
    siren: String!
    tags: [CompanyTag]
    updatedAt: Date
    users: [CompanyUser]
}

type CompanyImage {
    createdAt: Date
    filename: String
    id: ID!
    name: String
    products: [Product]
    updatedAt: Date
}

type CompanyOpeningDay {
    company: Company!
    daySlugName: String!
    dayTranslationKey: String!
    hours: [CompanyOpeningDayHours!]!
    id: ID!
}

type CompanyOpeningDayHours {
    day: CompanyOpeningDay!
    endTime: Date!
    id: ID!
    startTime: Date!
}

type CompanyProductsCategory {
    company: Company!
    id: ID!
    name: String!
    products: [Product]!
}

type CompanyReview {
    company: Company
    customer: Customer
    customerMark: Int!
    description: String
    id: String!
    title: String!
}

type CompanyTag {
    color: String!
    id: String!
    slugName: String!
    translationKey: String!
}

type CompanyUser {
    company: Company
    id: String!
    roles: [Role]
    user: User
}

type Customer {
    cart: Cart
    companyReviews: [CompanyReview]
    favoriteCompanies: [Company]
    id: String!
    user: User!
}

type CustomerAddress {
    address: String!
    apartment: String
    customer: Customer
    id: String!
    information: String
    location: GeographicPoint
}

type GeographicPoint {
    coordinates: [Float]
}

type Mutation {
    _: Boolean
    addCategoryToProduct(categoryName: String!, productId: String!): Product!
    addCompanyImage(companyId: ID!, image: Upload!, name: String): CompanyImage
    addCompanyImages(companyId: ID!, images: [Upload]!, names: [String]): [CompanyImage]
    addFavoriteCompany(companyId: String!): Customer
    addImageToProduct(companyImageId: String!, isCover: Boolean, productId: String!): CompanyImage
    addOpeningDay(companyId: String!, day: String!, hours: [ScheduleInput]): CompanyOpeningDay!
    addProductToCart(productId: ID!, quantity: Int!): CartProduct
    addProductToCompanyCategory(categoryId: String!, productId: String!): Product
    addTagToCompany(companyId: String!, companyTagId: String!): Company!
    addUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
    createCategory(name: String!, parentCategoryId: String): Category!
    createCompany(address: String!, description: String, email: String!, name: String!, phone: String!, siren: String!): Company!
    createCompanyProductsCategory(companyId: String!, name: String!): CompanyProductsCategory
    createCompanyReview(companyId: String!, customerMark: Int!, description: String, title: String): CompanyReview
    createCompanyTag(color: String!, name: String!): CompanyTag!
    createOrUpdateCustomerAddress(address: String!, apartment: String, id: String, information: String): CustomerAddress
    createProduct(companyId: String!, companyProductsCategoryId: String, coverId: String, description: String!, name: String!, price: Float!, quantityForUnit: Int, unitId: String): Product!
    createProductReview(customerMark: Int!, description: String, productId: String!, title: String): ProductReview
    createStripeCustomer: Boolean!
    defineUserAsCustomer(userId: String!): Customer
    deleteCard(cardId: String!): Boolean
    deleteCategory(id: String!): Category!
    deleteCompany(companyId: String!): Company!
    deleteCompanyTag(companyTagId: String!): CompanyTag!
    deleteImageFromProduct(companyImageId: String!, productId: String!): CompanyImage
    deleteProduct(productId: String!): Int
    deleteTagFromCompany(companyId: String!, companyTagId: String!): Company!
    generateCodePasswordForgot(email: String!): Boolean
    joinCompany(companyId: String!, userId: String!): Company!
    leaveCompany(companyId: String!, userId: String!): Company!
    login(email: String!, password: String!): SigninAnswer!
    register(defineUserAsCustomer: Boolean, email: String!, firstName: String!, lastName: String!, password: String!, phone: String): SignupAnswer!
    removeCompanyImage(imageId: ID!): CompanyImage
    removeCompanyImages(imagesId: [ID]!): [CompanyImage]
    removeCompanyProductsCategory(categoryId: String!): CompanyProductsCategory
    removeFavoriteCompany(companyId: String!): Customer
    removeOpeningDay(openingDayId: String!): CompanyOpeningDay!
    removeOpeningHours(hourId: String!): CompanyOpeningDayHours!
    removeProductFromCart(cartProductId: ID, productId: ID, quantity: Int!): Int
    removeProductFromCompanyCategory(productId: String!): Product
    removeUserCompanyRole(companyUserId: String!, roleId: String!): CompanyUser!
    saveCard(cardId: String!): Card!
    setActiveCustomerAddress(id: String!): CustomerAddress
    signInWithFacebook(exponentPushToken: String, facebookToken: String!): SigninAnswer!
    signInWithgeneratedCode(code: String!, email: String!, exponentPushToken: String): SigninAnswer!
    signUpWithFacebook(defineUserAsCostumer: Boolean, exponentPushToken: String, facebookToken: String!): SignupAnswer!
    updateCompany(companyId: ID!, newValues: CompanyUpdateInput): Company!
    updateCompanyImageName(imageId: ID!, name: String!): CompanyImage
    updateCompanyProductsCategory(categoryId: String!, name: String): CompanyProductsCategory
    updateOpeningDay(hours: [ScheduleInput], openingDayId: String!): CompanyOpeningDay!
    updateOpeningHours(hourId: String!, hours: ScheduleInput!): CompanyOpeningDayHours!
    updateProduct(coverId: String, description: String, name: String, price: Float, productId: String, quantityForUnit: Float, unitId: String): Product
    updateProductCover(companyImageId: String!, productId: String!): Product
    updateProductsPosition(productsPositions: [ProductPosition!]): Boolean
    updateUser(email: String, firstName: String, lastName: String, password: String, phone: String): User!
    updateUserAvatar(avatar: Upload!): User
    uploadImageOfProduct(image: Upload!, isCover: Boolean, productId: String!): CompanyImage
}

type Product {
    averageMark: Float
    categories: [Category]
    company: Company
    companyProductsCategory: CompanyProductsCategory
    cover: CompanyImage
    createdAt: Date
    customerBasketProducts: [CartProduct]
    description: String!
    id: ID!
    images: [CompanyImage]
    name: String!
    numberOfMarks: Int
    position: Int
    price: Float!
    quantityForUnit: Float!
    reviews: [ProductReview]
    unit: Unit
    updatedAt: Date
}

type ProductReview {
    customer: Customer
    customerMark: Int!
    description: String
    id: String!
    product: Product
    title: String!
}

type Query {
    _: Boolean
    doesFacebookAccountExistWithEmail(facebookToken: String!): Boolean!
    getActiveCustomerAddress: CustomerAddress
    getAllCategories: [Category]!
    getAllCompanies(page: Int, pageSize: Int): [Company]
    getAllCompanyProductsCategories(companyId: String!): [CompanyProductsCategory]
    getAllCompanyTags: [CompanyTag]!
    getAllCustomerAddressesByUser: [CustomerAddress]
    getAllCustomers: [Customer]
    getAllProducts: [Product]!
    getAllRoles: [Role]!
    getAllUnits(referencesOnly: Boolean): [Unit]!
    getAllUsers: [User]!
    getCart: Cart
    getCategoryByName(name: String!): Category
    getCompanies: [Company]
    getCompaniesByDistance(lat: Float!, lon: Float!, page: Int, pageSize: Int): [Company]
    getCompaniesByDistanceByCustomer(page: Int, pageSize: Int): [Company]
    getCompaniesByUser(userId: ID!): [CompanyUser]
    getCompany(companyId: ID!): Company
    getCompanyByName(name: String!): Company
    getCompanyImages(companyId: ID, page: Int, pageSize: Int): [CompanyImage]
    getCompanyProductsCategory(categoryId: String, companyId: String!, name: String): CompanyProductsCategory
    getCompanyReviews(id: ID!, limit: Int!, offset: Int!): [CompanyReview]
    getCompanyTag(companyTagId: String, slugName: String): CompanyTag
    getCustomer(userId: String!): Customer
    getCustomerFavoriteCompanies(userId: String): [Company]
    getProduct(id: ID!): Product!
    getProductReviews(id: ID!, limit: Int!, offset: Int!): [ProductReview]
    getProductsByCompany(companyId: String): [Product]!
    getProductsByCompanyByCategory(companyId: String): [Category]!
    getUnit(id: ID, name: String, notation: String): Unit!
    getUser: User
    listCustomerCards: [Card]
    searchCompanies(query: String!): [Company]
}

type Role {
    id: String!
    slugName: String
    translationKey: String
    userPermission: UserPermissions
}

type SigninAnswer {
    token: String!
    userId: String!
}

type SignupAnswer {
    message: String!
    token: String!
    userId: String!
}

type Subscription {
    _: Boolean
}

type Unit {
    id: ID!
    multiplicationFactor: Float
    name: String!
    notation: String!
    referenceUnit: Unit
}

type User {
    avatar: String
    companies: [CompanyUser]
    createdAt: Date
    customer: Customer
    email: String!
    firstName: String!
    id: ID!
    lastName: String!
    password: String!
    phone: String!
    validated: Boolean
}

type UserPermissions {
    createCompany: Boolean
    id: String!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

input CompanyUpdateInput {
    address: String
    coverId: String
    description: String
    email: String
    logoId: String
    name: String
    phone: String
    siren: String
}

input ProductPosition {
    categoryId: ID
    position: Int!
    productId: ID!
    type: String
}

input ScheduleInput {
    endTime: Date!
    startTime: Date!
}


scalar Date

"The `Upload` scalar type represents a file upload."
scalar Upload